---
title: "날씨 API"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  eval: true    
---

# 날씨 API

[기상청_단기예보 ((구)\_동네예보) 조회서비스](https://www.data.go.kr/data/15084084/openapi.do) API는 초단기실황, 초단기예보, 단기((구)동네)예보, 예보버전 정보를 조회하는 서비스입니다. 초단기실황정보는 예보 구역에 대한 대표 AWS 관측값을, 초단기예보는 예보시점부터 6시간까지의 예보를, 단기예보는 예보기간을 글피까지 확장 및 예보단위를 상세화(3시간→1시간)하여 시공간적으로 세분화한 예보를 제공합니다.

제공되는 API 문서에서 세종대학교 해당 좌표(`nx`, `ny`)를 특정하고 해당 좌표의 날씨 정보를 조회하는 코드를 작성한다. 

```{r}
# Load required libraries
library(httr2)
library(xml2)
library(dplyr)
library(tidyr)

# Set API information
service_key <- Sys.getenv("DATA_GO_DECODE_KEY")  # Your decoded service key
base_date <- str_remove_all(Sys.Date(), "-") # "20240628"  # Forecast base date (YYYYMMDD format)
base_time <- "0500"      # Forecast base time (HHMM format)
nx <- 62                 # X coordinate for Seoul Gwangjin-gu Gunja-dong (Sejong University)
ny <- 126                # Y coordinate for Seoul Gwangjin-gu Gunja-dong (Sejong University)

# Make API request
resp <- request("http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst") |> 
  req_url_query(
    serviceKey = service_key,
    pageNo = "1",
    numOfRows = "1000",
    dataType = "XML",
    base_date = base_date,
    base_time = base_time,
    nx = nx,
    ny = ny
  ) |> 
  req_perform()

# Parse XML response
xml_data <- resp |> resp_body_xml()

# Extract items
items <- xml_find_all(xml_data, "//item")

# Convert to data frame
forecast_data <- map_df(items, ~{
  data.frame(
    baseDate = xml_text(xml_find_first(.x, ".//baseDate")),
    baseTime = xml_text(xml_find_first(.x, ".//baseTime")),
    category = xml_text(xml_find_first(.x, ".//category")),
    fcstDate = xml_text(xml_find_first(.x, ".//fcstDate")),
    fcstTime = xml_text(xml_find_first(.x, ".//fcstTime")),
    fcstValue = xml_text(xml_find_first(.x, ".//fcstValue"))
  )
})

# Reshape data
forecast_tbl <- forecast_data %>%
  pivot_wider(names_from = category, values_from = fcstValue)

# Print the first few rows of the resulting data
temperature <- forecast_tbl |> 
  mutate(fcstDate = ymd(fcstDate)) |> 
  filter(fcstDate == min(fcstDate)) |> 
  mutate(TMP = as.numeric(TMP)) |>
  summarise(평균온도 = mean(TMP)) |> 
  pull(평균온도)

print(temperature)

```
